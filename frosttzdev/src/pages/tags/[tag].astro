---
// Import necessary types and components
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogPost from '../../components/BlogPost.astro';

// Define types for post frontmatter and structure
interface PostFrontmatter 
{
  title: string;
  tags: string[];
}

interface Post {
  url: string;
  frontmatter: PostFrontmatter;
}

// Define the return type for getStaticPaths
interface StaticPath {
  params: { tag: string };
  props: { posts: Post[] };
}

export async function getStaticPaths(): Promise<StaticPath[]> {
  const allPosts: Post[] = await Astro.glob('../posts/*.md'); // Type assertion for posts

  // Extract unique tags
  const uniqueTags = [...new Set(allPosts.map((post) => post.frontmatter.tags).flat())];

  // Map tags to paths and props
  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post) => post.frontmatter.tags.includes(tag));
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

// Define types for Astro props and params
const { tag }: { tag: string } = Astro.params;
const { posts }: { posts: Post[] } = Astro.props;

// Template rendering
---
<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>
  <ul>
    {posts.map((post: Post) => (
      <BlogPost url={post.url} title={post.frontmatter.title} />
    ))}
  </ul>
</BaseLayout>
